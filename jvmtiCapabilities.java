// Generated by jextract

import java.lang.foreign.*;
import java.util.function.Consumer;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int can_tag_objects : 1;
 *     unsigned int can_generate_field_modification_events : 1;
 *     unsigned int can_generate_field_access_events : 1;
 *     unsigned int can_get_bytecodes : 1;
 *     unsigned int can_get_synthetic_attribute : 1;
 *     unsigned int can_get_owned_monitor_info : 1;
 *     unsigned int can_get_current_contended_monitor : 1;
 *     unsigned int can_get_monitor_info : 1;
 *     unsigned int can_pop_frame : 1;
 *     unsigned int can_redefine_classes : 1;
 *     unsigned int can_signal_thread : 1;
 *     unsigned int can_get_source_file_name : 1;
 *     unsigned int can_get_line_numbers : 1;
 *     unsigned int can_get_source_debug_extension : 1;
 *     unsigned int can_access_local_variables : 1;
 *     unsigned int can_maintain_original_method_order : 1;
 *     unsigned int can_generate_single_step_events : 1;
 *     unsigned int can_generate_exception_events : 1;
 *     unsigned int can_generate_frame_pop_events : 1;
 *     unsigned int can_generate_breakpoint_events : 1;
 *     unsigned int can_suspend : 1;
 *     unsigned int can_redefine_any_class : 1;
 *     unsigned int can_get_current_thread_cpu_time : 1;
 *     unsigned int can_get_thread_cpu_time : 1;
 *     unsigned int can_generate_method_entry_events : 1;
 *     unsigned int can_generate_method_exit_events : 1;
 *     unsigned int can_generate_all_class_hook_events : 1;
 *     unsigned int can_generate_compiled_method_load_events : 1;
 *     unsigned int can_generate_monitor_events : 1;
 *     unsigned int can_generate_vm_object_alloc_events : 1;
 *     unsigned int can_generate_native_method_bind_events : 1;
 *     unsigned int can_generate_garbage_collection_events : 1;
 *     unsigned int can_generate_object_free_events : 1;
 *     unsigned int can_force_early_return : 1;
 *     unsigned int can_get_owned_monitor_stack_depth_info : 1;
 *     unsigned int can_get_constant_pool : 1;
 *     unsigned int can_set_native_method_prefix : 1;
 *     unsigned int can_retransform_classes : 1;
 *     unsigned int can_retransform_any_class : 1;
 *     unsigned int can_generate_resource_exhaustion_heap_events : 1;
 *     unsigned int can_generate_resource_exhaustion_threads_events : 1;
 *     unsigned int can_generate_early_vmstart : 1;
 *     unsigned int can_generate_early_class_hook_events : 1;
 *     unsigned int can_generate_sampled_object_alloc_events : 1;
 *     unsigned int can_support_virtual_threads : 1;
 *     unsigned int : 3;
 *     unsigned int : 16;
 *     unsigned int : 16;
 *     unsigned int : 16;
 *     unsigned int : 16;
 *     unsigned int : 16;
 * }
 * }
 */
public class jvmtiCapabilities {

    jvmtiCapabilities() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.paddingLayout(16)
    ).withName("$anon$674:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

